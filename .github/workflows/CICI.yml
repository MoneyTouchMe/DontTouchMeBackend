name: CI/CD

on:
  push:
    branches:
      - develop
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DB }}
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          mkdir -p src/test/resources
          echo "${{ secrets.CI_YML }}" | base64 --decode > src/main/resources/application.yml
          echo "${{ secrets.CI_YML }}" | base64 --decode > src/test/resources/application.yml

      - name: Create firebase-service-account.json
        run: |
          mkdir -p src/main/resources/firebase
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 --decode > src/main/resources/firebase/firebase-service-account.json

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

  cd:
    needs: ci
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Get Github Action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: AWS Credentials 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 보안 그룹에 GitHub Actions IP 추가
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-name ${{ secrets.AWS_SG_NAME }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: EC2에 접속해서 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            
            
            # Git 최신 코드 가져오기
            cd /home/ubuntu/DontTouchMeBackend
            git switch develop
            git pull origin develop
            
            # application.yml 생성 (Secrets에서 디코딩)
            mkdir -p src/main/resources
            echo "${{ secrets.CD_YML }}" | base64 --decode > src/main/resources/application.yml
            
            # Gradle로 빌드
            chmod +x gradlew
            ./gradlew clean bootJar
            
            # 도커 권한 설정
            sudo chmod 666 /var/run/docker.sock
            
            # 기존 컨테이너 중지 및 제거 (필요 시)
            docker stop dont_touch_me || true
            docker rm dont_touch_me || true
            
            # 도커 이미지 빌드
            docker build -t dont_touch_me:latest .
            
            # 도커 컨테이너 실행 (8080 포트로 매핑)
            docker run -d --name dont_touch_me -p 8080:8080 dont_touch_me:latest
            
            # 사용하지 않는 이미지 정리
            sudo docker image prune -f

      - name: 보안 그룹에서 GitHub Actions IP 제거
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-name ${{ secrets.AWS_SG_NAME }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32